"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2901],{3905:(e,t,n)=>{n.d(t,{Zo:()=>o,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),c=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},o=function(e){var t=c(e.components);return r.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},k=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,i=e.parentName,o=u(e,["components","mdxType","originalType","parentName"]),k=c(n),d=a,h=k["".concat(i,".").concat(d)]||k[d]||p[d]||s;return n?r.createElement(h,l(l({ref:t},o),{},{components:n})):r.createElement(h,l({ref:t},o))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,l=new Array(s);l[0]=k;var u={};for(var i in t)hasOwnProperty.call(t,i)&&(u[i]=t[i]);u.originalType=e,u.mdxType="string"==typeof e?e:a,l[1]=u;for(var c=2;c<s;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}k.displayName="MDXCreateElement"},5667:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>p,frontMatter:()=>s,metadata:()=>u,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const s={},l="Stacks and Queues",u={unversionedId:"dataStructure/05stacks_queues",id:"dataStructure/05stacks_queues",title:"Stacks and Queues",description:"Introduce Stack",source:"@site/docs/dataStructure/05stacks_queues.md",sourceDirName:"dataStructure",slug:"/dataStructure/05stacks_queues",permalink:"/docs/dataStructure/05stacks_queues",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/dataStructure/05stacks_queues.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Linked list",permalink:"/docs/dataStructure/04linked_list"},next:{title:"Tree",permalink:"/docs/dataStructure/06tree"}},i={},c=[{value:"Introduce Stack",id:"introduce-stack",level:2},{value:"Introduce queues",id:"introduce-queues",level:2},{value:"How can I build a stack? Use array or linked list?",id:"how-can-i-build-a-stack-use-array-or-linked-list",level:2},{value:"How can I build a queue? Use array or linked list?",id:"how-can-i-build-a-queue-use-array-or-linked-list",level:2},{value:"Implement stack by linked list",id:"implement-stack-by-linked-list",level:2},{value:"Implement stack by array",id:"implement-stack-by-array",level:2},{value:"Implement queue by linklist",id:"implement-queue-by-linklist",level:2}],o={toc:c};function p(e){let{components:t,...s}=e;return(0,a.kt)("wrapper",(0,r.Z)({},o,s,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"stacks-and-queues"},"Stacks and Queues"),(0,a.kt)("h2",{id:"introduce-stack"},"Introduce Stack"),(0,a.kt)("p",null,"Stacks has LIFO (Last-In-First-Out)\uff0c\u6700\u665a\u9032\u5165\u7684\u8cc7\u6599\u6703\u88ab\u6700\u65e9\u53d6\u51fa\uff0c\u5e38\u898b\u7684\u61c9\u7528 \u5982\uff08\u7de8\u8f2f\u5668\u7684 undo, \u7db2\u9801\u700f\u89bd\u5668 \u56de\u5230\u524d\u4e00\u9801, \u905e\u8ff4 recursion \u53ef\u4ee5\u7528 stack \u6539\u5beb, \u8a18\u61b6\u9ad4\u7ba1\u7406\u4e2d\u7684 call stack \uff09"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"stack",src:n(6681).Z,width:"1097",height:"540"})),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"introduce-queues"},"Introduce queues"),(0,a.kt)("p",null,"Queues has FIFO (First-In-First-Out)\uff0c\u6700\u65e9\u9032\u5165\u7684\u6703\u88ab\u6700\u65e9\u53d6\u51fa\uff0c\u5e38\u898b\u4f8b\u5b50\uff0c\u6f14\u7b97\u6cd5 Breadth first search \uff08\u5ee3\u5ea6\u512a\u5148\u641c\u5c0b\uff09 \u8207 tree \u7684 level-order-traversal\uff0c\u4f5c\u696d\u7cfb\u7d71\u4e2d\u7684\u5171\u4eab\u8cc7\u6e90\uff0c\u4f8b\u5982 request or interrupt, \u9700\u8981\u6709\u500b queue \u4f86\u6500\u53f0\u591a\u500b\u7a0b\u5f0f\u7684\u57f7\u884c\u9806\u5e8f\u3002"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"queue",src:n(5083).Z,width:"1467",height:"818"})),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"how-can-i-build-a-stack-use-array-or-linked-list"},"How can I build a stack? Use array or linked list?"),(0,a.kt)("p",null,"\u5148\u8aaa\u7d50\u8ad6\uff0c\u5169\u500b\u90fd\u5dee\u4e0d\u591a\uff0c\u4f9d\u64da\u4f60\u504f\u597d\u6216\u662f\u512a\u5148\u5ea6\u8f03\u9ad8\u7684\u9078\u4f86\u7528"),(0,a.kt)("p",null,"\u5224\u65b7\u4e00\u4e0b array \u8ddf linked list \u5dee\u5225"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"array \u8a18\u61b6\u9ad4\u4f4d\u7f6e\u662f\u9023\u7e8c\u7684\uff0caccess \u8f03\u5feb\u4e00\u9ede\uff0c\u4f46\u662f\u5982\u679c\u8d85\u904e\u539f\u672c array \u8a18\u61b6\u9ad4\u5927\u5c0f\u7684\u8a71\uff0c\u4ed6\u9700\u8981\u984d\u5916\u5728 \u958b\u4e00\u500b double \u7684\u8a18\u61b6\u9ad4\u5927\u5c0f\u4f4d\u7f6e\uff0c\u4f86\u8907\u88fd\u820a\u7684 array\u3002"),(0,a.kt)("li",{parentName:"ul"},"linked list \u8a18\u61b6\u9ad4\u4f4d\u7f6e\u662f\u5206\u6563\u7684\uff0caccess \u8f03\u6162\u4e00\u9ede\uff0c\u800c\u4e14\u9700\u8981\u984d\u5916\u8a18\u61b6\u9ad4\u4f86\u5132\u5b58 pointer\uff0c\u4f46\u662f\u4ed6\u6709\u66f4\u591a dynamic memory")),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"how-can-i-build-a-queue-use-array-or-linked-list"},"How can I build a queue? Use array or linked list?"),(0,a.kt)("p",null,"\u5148\u8aaa\u7d50\u8ad6 \u7528 ",(0,a.kt)("strong",{parentName:"p"},"Linked list")," \u6bd4\u8f03\u597d"),(0,a.kt)("p",null,"\u56e0\u70ba queues \u662f FIFO \u6240\u5df2\u8981\u5e38\u5e38\u79fb\u6389\u7b2c\u4e00\u500b\u9032\u5165\u7684\u7269\u54c1\uff0c\u5982\u679c\u7528 array \u4f86\u79fb\u7684\u8a71\uff0c\u9664\u4e86\u79fb\u6389\u7b2c\u4e00\u500b\u4f4d\u7f6e\u7684 \u7269\u54c1\uff0c\u9084\u9700\u8981\u9023\u5e36 shift \u5f8c\u9762\u7684 index \u8b93\u4ed6\u5011\u90fd\u5f80\u524d\u4e00\u500b\u3002\u4f46\u4f7f\u7528 linklist \u7684\u8a71\uff0c\u5c31\u6c92\u6709 shift \u9019\u500b\u554f\u984c\u3002"),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"implement-stack-by-linked-list"},"Implement stack by linked list"),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Click me show the codes"),(0,a.kt)("p",null,(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"class Node {\n  constructor(value) {\n    this.value = value;\n    this.next = null;\n  }\n}\n\nclass Stack {\n  constructor() {\n    this.top = null;\n    this.bottom = null;\n    this.length = 0;\n  }\n  peek() {\n    if (this.length === 0) return null;\n    return this.top.value;\n  }\n  push(value) {\n    let node = new Node(value);\n    if (this.length === 0) {\n      this.top = node;\n      this.bottom = node;\n    } else {\n      let topNode = this.top;\n      node.next = topNode;\n      this.top = node;\n    }\n    this.length++;\n  }\n  pop() {\n    if (this.length === 0) {\n      return null;\n    } else {\n      let topNode = this.top;\n      this.top = topNode.next;\n      this.length--;\n      if (this.length === 0) {\n        this.bottom = null;\n      }\n      return topNode.val;\n    }\n  }\n  printList() {\n    let top = this.top;\n    let arr = [];\n    while (top) {\n      arr.push(top.value);\n      top = top.next;\n    }\n    console.log(arr);\n  }\n}\n\nconst myStack = new Stack();\nmyStack.push(1);\nmyStack.printList();\nmyStack.push(2);\nmyStack.printList();\nmyStack.pop();\nmyStack.printList();\nmyStack.pop();\nmyStack.printList();\n")))),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"implement-stack-by-array"},"Implement stack by array"),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Click me show the codes"),(0,a.kt)("p",null,(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"class Stack {\n  constructor() {\n    this.stack = [];\n  }\n  push(value) {\n    this.stack.push(value);\n    return this.stack;\n  }\n  pop() {\n    if (this.stack.length === 0) {\n      return;\n    }\n    let res = this.stack.pop();\n    return res;\n  }\n  peak() {\n    console.log(this.stack[this.stack.length - 1]);\n    return this.stack[this.stack.length - 1];\n  }\n}\n\nconst stack = new Stack();\nstack.push(1);\nstack.peak();\nstack.push(2);\nstack.peak();\nstack.pop();\nstack.peak();\nstack.pop();\nstack.peak();\n")))),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"implement-queue-by-linklist"},"Implement queue by linklist"),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Click me show the codes"),(0,a.kt)("p",null,(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"class Node {\n  constructor(value) {\n    this.value = value;\n    this.next = null;\n  }\n}\nclass Queue {\n  constructor() {\n    this.first = null;\n    this.last = null;\n    this.length = 0;\n  }\n  peak() {\n    return this.first;\n  }\n  enQueue(value) {\n    let node = new Node(value);\n    if (this.length === 0) {\n      this.first = node;\n      this.last = node;\n    } else {\n      this.last.next = node;\n      this.last = node;\n    }\n    this.length++;\n    return this;\n  }\n  deQueue() {\n    if (this.length === 0) {\n      return this;\n    } else {\n      let first = this.first;\n      this.first = first.next;\n      this.length--;\n      if (this.length === 0) {\n        this.last === null;\n      }\n      return this;\n    }\n  }\n}\n\nconst queue = new Queue();\nqueue.enQueue(1);\nconsole.log(queue.peak());\nqueue.enQueue(2);\nconsole.log(queue.peak());\nqueue.deQueue();\nconsole.log(queue.peak());\nqueue.deQueue();\nconsole.log(queue.peak());\n")))))}p.isMDXComponent=!0},5083:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/queue-208741c62d3a1203ca1c59f80c66cc0e.png"},6681:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/stack-cb219ba13fa166a91b3fb600ca35f73f.png"}}]);