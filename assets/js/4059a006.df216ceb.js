"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2819],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=c(n),d=r,g=m["".concat(s,".").concat(d)]||m[d]||p[d]||o;return n?a.createElement(g,l(l({ref:t},u),{},{components:n})):a.createElement(g,l({ref:t},u))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var c=2;c<o;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6313:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const o={},l="Big-O",i={unversionedId:"dataStructure/01big_o",id:"dataStructure/01big_o",title:"Big-O",description:"what is good code?",source:"@site/docs/dataStructure/01big_o.md",sourceDirName:"dataStructure",slug:"/dataStructure/01big_o",permalink:"/docs/dataStructure/01big_o",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/dataStructure/01big_o.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Data Structure & Algorithm",permalink:"/docs/category/data-structure--algorithm"},next:{title:"Array",permalink:"/docs/dataStructure/02Array"}},s={},c=[{value:"what is good code?",id:"what-is-good-code",level:2},{value:"Big-O complexity chart",id:"big-o-complexity-chart",level:2},{value:"Big-O notation",id:"big-o-notation",level:2},{value:"O(n)",id:"on",level:3},{value:"O(1)",id:"o1",level:3},{value:"O(n^2)",id:"on2",level:3},{value:"Big-O Rule",id:"big-o-rule",level:2},{value:"what cause space complexity?",id:"what-cause-space-complexity",level:2},{value:"QA",id:"qa",level:2},{value:"1. Is O(1) always better than O(n)?",id:"1-is-o1-always-better-than-on",level:3},{value:"2. what is important for code? (Readable, speed, memory)?",id:"2-what-is-important-for-code-readable-speed-memory",level:3}],u={toc:c};function p(e){let{components:t,...o}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"big-o"},"Big-O"),(0,r.kt)("h2",{id:"what-is-good-code"},"what is good code?"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"readable"),(0,r.kt)("li",{parentName:"ul"},"scalable",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"speed (time complicated)"),(0,r.kt)("li",{parentName:"ul"},"memory (space complicated)")))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"big-o-complexity-chart"},"Big-O complexity chart"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"complexity chart",src:n(6349).Z,width:"800",height:"556"})),(0,r.kt)("p",null,"\u200b x-axis: elements number, y-axis: operations times"),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"big-o-notation"},"Big-O notation"),(0,r.kt)("h3",{id:"on"},"O(n)"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"linear - ",(0,r.kt)("strong",{parentName:"li"},"for loops, while loops through n times"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const boxes = [0,1,2,3,4,5]\n\nfunction getEachBoxes(input) {\n  for (let i = 0; i < input.lengthl i++) {\n    console.log(input[i])\n  }\n}\ngetEachBoxes(boxes) //O(n)\n")),(0,r.kt)("h3",{id:"o1"},"O(1)"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"constant - ",(0,r.kt)("strong",{parentName:"li"},"no loops"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const boxes = [0, 1, 2, 3, 4, 5];\n\nfunction logFirstTwoBoxes(input) {\n  console.log(input[0]); //O(1)\n  console.log(input[1]); //O(1)\n}\nlogFirstTwoBoxes(boxes); //O(2)\n")),(0,r.kt)("h3",{id:"on2"},"O(n^2)"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Quadratic - ",(0,r.kt)("strong",{parentName:"li"},"every element in a collection needs to be compared to ever other element. Two nested loops"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const nums = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\nfunction nineNineTable(nums) {\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = 0; j < nums.length; j++) {\n      console.log(nums[i] * nums[j]);\n    }\n  }\n}\nnineNineTable(nums); //O(n^2)\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"big-o-rule"},"Big-O Rule"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"worst case.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"remove constant. ex.O(2n + 3) => O(n)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"different terms of inputs"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"let sayHi = (a, b) => {\n  for (let i = 0; i < a; i++) {\n    console.log('sayHi');\n  }\n  for (let j = 0; j < b; j++) {\n    console.log('sayHi');\n  }\n};\nsayHi(); // big-O => O(a+b)\n\nlet nested = (a, b) => {\n  for (let i = 0; i < a; i++) {\n    for (let j = 0; j < b; j++) {\n      console.log('sayHI');\n    }\n  }\n};\nnested(); // big-O => O(a*b)\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"drop non doninants. Ex O(n^2 + n + 1) => O(n^2). because when n is grow. The n^2 is growing bigger than other."))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"what-cause-space-complexity"},"what cause space complexity?"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Variables"),(0,r.kt)("li",{parentName:"ul"},"Data Structures"),(0,r.kt)("li",{parentName:"ul"},"Function Call"),(0,r.kt)("li",{parentName:"ul"},"Allocations")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"qa"},"QA"),(0,r.kt)("h3",{id:"1-is-o1-always-better-than-on"},"1. Is O(1) always better than O(n)?"),(0,r.kt)("p",null,"Ans: No it's depend on your situation.\nas We will say O(1) will better than O(n). it's because we assume n is a very big number."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"test",src:n(6511).Z,width:"1260",height:"954"})),(0,r.kt)("h3",{id:"2-what-is-important-for-code-readable-speed-memory"},"2. what is important for code? (Readable, speed, memory)?"),(0,r.kt)("p",null,"Ans: it depends on situation. but some times we will sacarfice memory to improve speed. and some times we will sacarfice spped to reduce memory use."))}p.isMDXComponent=!0},6349:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/complexity_chart-1d1335b7d77fc2c97c45c596f92c3a9d.jpeg"},6511:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/complexity_cmp-16a6ac6433d3eee8f2cbcdc4821f5cb6.png"}}]);