"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3606],{3905:(e,n,r)=>{r.d(n,{Zo:()=>c,kt:()=>d});var t=r(7294);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function l(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function s(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?l(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function i(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},l=Object.keys(e);for(t=0;t<l.length;t++)r=l[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)r=l[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var o=t.createContext({}),u=function(e){var n=t.useContext(o),r=n;return e&&(r="function"==typeof e?e(n):s(s({},n),e)),r},c=function(e){var n=u(e.components);return t.createElement(o.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},p=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,l=e.originalType,o=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=u(r),d=a,b=p["".concat(o,".").concat(d)]||p[d]||m[d]||l;return r?t.createElement(b,s(s({ref:n},c),{},{components:r})):t.createElement(b,s({ref:n},c))}));function d(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=r.length,s=new Array(l);s[0]=p;var i={};for(var o in n)hasOwnProperty.call(n,o)&&(i[o]=n[o]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var u=2;u<l;u++)s[u]=r[u];return t.createElement.apply(null,s)}return t.createElement.apply(null,r)}p.displayName="MDXCreateElement"},3882:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>s,default:()=>m,frontMatter:()=>l,metadata:()=>i,toc:()=>u});var t=r(7462),a=(r(7294),r(3905));const l={},s="Sort",i={unversionedId:"dataStructure/09sort",id:"dataStructure/09sort",title:"Sort",description:"Bubble sort",source:"@site/docs/dataStructure/09sort.md",sourceDirName:"dataStructure",slug:"/dataStructure/09sort",permalink:"/docs/dataStructure/09sort",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/dataStructure/09sort.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Recurision",permalink:"/docs/dataStructure/08recurision"},next:{title:"React",permalink:"/docs/category/react"}},o={},u=[{value:"Bubble sort",id:"bubble-sort",level:2},{value:"Selection sort",id:"selection-sort",level:2},{value:"Insertion sort",id:"insertion-sort",level:2},{value:"Merge sort",id:"merge-sort",level:2},{value:"Stable sorting vs Unstable\u02cb sorting",id:"stable-sorting-vs-unstable\u02cb-sorting",level:2},{value:"Stable:",id:"stable",level:3},{value:"Unstable:",id:"unstable",level:3},{value:"Quick sort",id:"quick-sort",level:2},{value:"Heap sort",id:"heap-sort",level:2},{value:"Which sort is the best",id:"which-sort-is-the-best",level:2},{value:"Exercise",id:"exercise",level:2}],c={toc:u};function m(e){let{components:n,...r}=e;return(0,a.kt)("wrapper",(0,t.Z)({},c,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"sort"},"Sort"),(0,a.kt)("h2",{id:"bubble-sort"},"Bubble sort"),(0,a.kt)("details",null," ",(0,a.kt)("summary",null," Click me show the codes "),(0,a.kt)("p",null,(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const numbers = [99, 44, 6, 2, 1, 5, 63, 87, 283, 4, 0];\n\nfunction bubbleSort(array) {\n  for (let i = 0; i < array.length; i++) {\n    for (let j = 0; j < array.length - i - 1; j++) {\n      if (array[j] > array[j + 1]) {\n        const tmp = array[j + 1];\n        array[j + 1] = array[j];\n        array[j] = tmp;\n      }\n    }\n  }\n}\n\nbubbleSort(numbers);\nconsole.log(numbers);\n")))),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"selection-sort"},"Selection sort"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://visualgo.net/en/sorting"},"\u539f\u7406\u5f71\u7247")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u6bcf\u6b21 loop array \u627e\u5230\u7b2c n \u5c0f\u7684 \u653e\u5230 array \u7b2c n \u500b\u4f4d\u7f6e\u3002")),(0,a.kt)("details",null," ",(0,a.kt)("summary",null," Click me show the codes "),(0,a.kt)("p",null,(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const numbers = [99, 44, 6, 2, 1, 5, 63, 87, 283, 4, 0];\n\nfunction selectionSort(array) {\n  for (let i = 0; i < array.length; i++) {\n    let min = array[i];\n    let index = i;\n    for (let j = i; j < array.length; j++) {\n      if (array[j] < min) {\n        min = array[j];\n        index = j;\n      }\n    }\n    let tmp = array[i];\n    array[i] = min;\n    array[index] = tmp;\n  }\n  return array;\n}\n\nconsole.log(selectionSort(numbers));\n")))),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"insertion-sort"},"Insertion sort"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://visualgo.net/en/sorting"},"\u539f\u7406\u5f71\u7247")),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Click me show the codes"),(0,a.kt)("p",null,(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const numbers = [99, 44, 6, 2, 1, 5, 63, 87, 283, 4, 0];\n\nfunction insertionSort(array) {\n  for (let i = 1; i < array.length; i++) {\n    if (array[i] < array[i - 1]) {\n      for (let j = i; j > 0; j--) {\n        if (array[i] < array[0]) {\n          array.unshift(array.splice(i, 1)[0]);\n        } else if (array[i] > array[j - 1] && array[i] < array[j]) {\n          array.splice(j, 0, array.splice(i, 1)[0]);\n        }\n      }\n    }\n  }\n}\n\ninsertionSort(numbers);\nconsole.log(numbers);\n")))),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"merge-sort"},"Merge sort"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://visualgo.net/en/sorting"},"\u539f\u7406\u5f71\u7247")),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Click me show the codes"),(0,a.kt)("p",null,(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const numbers = [99, 44, 6, 2, 1, 5, 63, 87, 283, 4, 0];\n// const numbers = [99, 44, 6, 2, 1, 5, 63, 87, 283, 4, 0]\n\nfunction mergeSort(array) {\n  if (array.length === 1) {\n    return array;\n  }\n  // Split Array in into right and left\n  let left, right;\n  if (array.length % 2 === 0) {\n    left = array.slice(0, array.length / 2);\n    right = array.slice(array.length / 2, array.length);\n  } else {\n    left = array.slice(0, array.length / 2 + 1);\n    right = array.slice(array.length / 2 + 1, array.length);\n  }\n  return merge(mergeSort(left), mergeSort(right));\n}\n\nfunction merge(left, right) {\n  let indexL = 0;\n  let indexR = 0;\n  let res = [];\n  while (!isNaN(right[indexR]) || !isNaN(left[indexL])) {\n    if (isNaN(right[indexR]) || left[indexL] < right[indexR]) {\n      res.push(left[indexL]);\n      indexL++;\n    } else {\n      res.push(right[indexR]);\n      indexR++;\n    }\n  }\n  return res;\n}\n\nconst answer = mergeSort(numbers);\nconsole.log(answer);\n")))),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"stable-sorting-vs-unstable\u02cb-sorting"},"Stable sorting vs Unstable\u02cb sorting"),(0,a.kt)("h3",{id:"stable"},"Stable:"),(0,a.kt)("p",null,"sorting \u524d arr","[i]"," === arr","[j]"," \u4e14 i < j\uff0csorting \u5f8c\u539f\u5148\u7684\u4f4d\u7f6e\u9806\u5e8f\u4e26\u4e0d\u6703\u4ea4\u63db\uff0c\u6545 arr","[afterI]"," === arr","[afterJ]"," \u4e14 afterI < afterJ\u3002\nex: bubble, selection, insertion, merge"),(0,a.kt)("h3",{id:"unstable"},"Unstable:"),(0,a.kt)("p",null,"sorting \u5f8c\u9806\u5e8f\u4f4d\u7f6e\u53ef\u80fd\u6703\u4ea4\u63db\u3002\nEx: quick, heap"),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"quick-sort"},"Quick sort"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u539f\u7406\uff1a\u53c3\u7167\u5c0f\u7070\u7a0b\u5e8f\u54e1\u88e1\u9762\u5beb\u7684")),(0,a.kt)("details",null," ",(0,a.kt)("summary",null," Click me show the codes "),(0,a.kt)("p",null,(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"// const numbers = [99, 44, 6, 2, 1, 5, 63, 87, 283, 4, 0];\nconst numbers = [99, 44, 6, 2, 1];\n\nfunction quickSort(array, left, right) {\n  if (left >= right) return;\n  const piv = partion(array, left, right);\n  quickSort(array, 0, piv - 1);\n  quickSort(array, piv + 1, right);\n}\n\nfunction partion(array, left, right) {\n  ////\u55ae\u908a\u6392\u5e8f\n  const piv = array[left];\n  let mark = left;\n  for (let i = left + 1; i <= right; i++) {\n    if (array[i] < piv) {\n      mark = mark + 1;\n      const tmp = array[i];\n      array[i] = array[mark];\n      array[mark] = tmp;\n    }\n  }\n  const first = array[left];\n  array[left] = array[mark];\n  array[mark] = first;\n  console.log(array);\n  return mark;\n}\n\n//Select first and last index as 2nd and 3rd parameters\nquickSort(numbers, 0, numbers.length - 1);\n// console.log(numbers)\n// console.log(numbers);\n")))),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"heap-sort"},"Heap sort"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://brilliant.org/wiki/heap-sort/"},"\u539f\u7406")),(0,a.kt)("details",null," ",(0,a.kt)("summary",null," Click me show the codes "),(0,a.kt)("p",null,(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const numbers = [3, 52, 63, 12, 43, 25, 64, 34, 7, 14];\n\nfunction heapSort(numbers) {\n  // create heap\n  for (let i = 0; i < numbers.length; i++) {\n    let current = numbers[i];\n    let currentIndex = i;\n    let parentIndex = findParent(i);\n    while (current > numbers[parentIndex] && currentIndex > 0) {\n      numbers[currentIndex] = numbers[parentIndex];\n      numbers[parentIndex] = current;\n      currentIndex = parentIndex;\n      parentIndex = findParent(parentIndex);\n    }\n  }\n  // console.log(numbers)\n  for (let i = numbers.length - 1; i > 0; i--) {\n    console.log(numbers);\n    const big = numbers[0];\n    numbers[0] = numbers[i];\n    numbers[i] = big;\n    let currentIndex = 0;\n    while (currentIndex < i) {\n      let leftIndex = 2 * currentIndex + 1;\n      let rightIndex = 2 * currentIndex + 2;\n      if (rightIndex >= i) {\n        break;\n      }\n      if (numbers[rightIndex] > numbers[leftIndex]) {\n        const tmp = numbers[currentIndex];\n        numbers[currentIndex] = numbers[rightIndex];\n        numbers[rightIndex] = tmp;\n        currentIndex = rightIndex;\n      } else {\n        const tmp = numbers[currentIndex];\n        numbers[currentIndex] = numbers[leftIndex];\n        numbers[leftIndex] = tmp;\n        currentIndex = leftIndex;\n      }\n    }\n  }\n  console.log(numbers);\n  return numbers;\n}\n\nheapSort(numbers);\n\nfunction findParent(i) {\n  if (i === 0) return 0;\n  return Math.floor((i - 1) / 2);\n}\n")))),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"which-sort-is-the-best"},"Which sort is the best"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Bubble - \u4e0d\u6703\u7528\u5230\uff0c\u57fa\u672c\u4e0a\u53ea\u6709\u5728\u6559\u5b78\u6642\u624d\u7528\u5230\u3002"),(0,a.kt)("li",{parentName:"ul"},"Selection - \u8ddf\u4e0a\u8ff0\u4e00\u6a23\u3002"),(0,a.kt)("li",{parentName:"ul"},"Insertion - \u5728\u6578\u91cf\u5f88\u5c0f\u7684\u60c5\u6cc1\uff0c\u6216\u662f\u57fa\u672c\u4e0a\u5927\u5c0f\u5df2\u7d93\u5dee\u4e0d\u591a\u90fd\u6392\u597d\u7684\u60c5\u6cc1\u4e0b"),(0,a.kt)("li",{parentName:"ul"},"Merge - \u5728\u4e0d care space complexity \u7684\u8acb\u6cc1\u4e0b \u9069\u5408\u4f7f\u7528\u5b83\u3002 \uff08space complexity O(n)\uff09"),(0,a.kt)("li",{parentName:"ul"},"Quick - \u5f88\u591a\u60c5\u6cc1\u90fd\u9069\u5408\u4f7f\u7528\u5b83\uff0cspace complexit \u53ea\u6709 O(log n)\u3002\u4e0d\u904e the worst time complexity \u662f O(n^2)\uff0c\u5982\u679c piviot \u6c92\u9078\u597d\u7684\u8a71\uff0c\u5c31\u6703\u662f O(n^2)\u3002 \u4e0d\u904e\u5927\u90e8\u5206\u60c5\u6cc1 quick \u90fd\u6bd4 merge or heap \u9084\u5feb\uff0c\u56e0\u70ba\u4ed6\u6c92\u6709\u505a\u904e\u591a\u7684 swap \u7684\u52d5\u4f5c\u3002")),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"exercise"},"Exercise"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"//#1 - Sort 10 schools around your house by distance:\nans = 'use insertion sort; beacuse it really small';\n\n//#2 - eBay sorts listings by the current Bid amount:\nans =\n  'use Radix or Count; because the range is small, like one dollar to ten dollar';\n\n//#3 - Sport scores on ESPN\nans =\n  'use quck sort; \u56e0\u70ba\u5206\u6578\u7e3d\u985e\u592a\u591a\uff0c\u6709\u5927\u6709\u5c0f\u3002\u7136\u5f8c\u56e0\u70ba\u6578\u91cf\u53ef\u80fd\u5f88\u5927\u4ee3\u8868 space complexity \u5118\u91cf\u9078\u5c0f\uff0c\u6545\u4e0d\u9069\u5408\u4f7f\u7528 merge sort, \u9019\u6a23 memory \u6703\u5403\u5f88\u91cd';\n\n//#4 - Massive database (can't fit all into memory) needs to sort through past year's user data\nans =\n  'merge sort, \u56e0\u70ba memory \u8981\u8003\u616e\u4f7f\u7528\u5916\u90e8\u8cc7\u6e90\uff0c\u5c31\u4e0d\u8003\u616e\u4f7f\u7528 space complexity; \u9019\u908a\u4e0d\u7528 quick \u662f\u56e0\u70ba\u8cc7\u6599\u5f88\u9f90\u5927\uff0c\u4e0d\u60f3\u8b93\u4ed6\u7684 worst case \u5230 n^2\uff0c\u9019\u6a23\u8655\u7406\u8d77\u4f86\u592a\u6162';\n\n//#5 - Almost sorted Udemy review data needs to update and add 2 new reviews\nans = 'insertion sort, \u56e0\u70ba\u90fd\u8981\u6392\u597d\u4e86';\n\n//#6 - Temperature Records for the past 50 years in Canada\nans = 'radix or count sort, \u5982\u679c\u6578\u5b57\u6c92\u6709\u5c0f\u6578\u7684\u8a71\uff0c\u4e14range \u4e0d\u5927\u6642\u3002';\nans = 'else quick sort';\n\n//#7 - Large user name database needs to be sorted. Data is very random.\nans = 'quick or merge \u90fd\u884c\uff0c\u4f46 quick \u8981\u78ba\u5b9a\u80fd\u9078\u5230\u597d\u7684 piviot';\n\n//#8 - You want to teach sorting for the first time\n// bubble sort\n")))}m.isMDXComponent=!0}}]);