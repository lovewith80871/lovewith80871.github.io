"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9869],{3905:(e,t,n)=>{n.d(t,{Zo:()=>o,kt:()=>h});var l=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,l)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,l,a=function(e,t){if(null==e)return{};var n,l,a={},i=Object.keys(e);for(l=0;l<i.length;l++)n=i[l],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(l=0;l<i.length;l++)n=i[l],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var d=l.createContext({}),u=function(e){var t=l.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},o=function(e){var t=u(e.components);return l.createElement(d.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},k=l.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,d=e.parentName,o=s(e,["components","mdxType","originalType","parentName"]),k=u(n),h=a,c=k["".concat(d,".").concat(h)]||k[h]||p[h]||i;return n?l.createElement(c,r(r({ref:t},o),{},{components:n})):l.createElement(c,r({ref:t},o))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,r=new Array(i);r[0]=k;var s={};for(var d in t)hasOwnProperty.call(t,d)&&(s[d]=t[d]);s.originalType=e,s.mdxType="string"==typeof e?e:a,r[1]=s;for(var u=2;u<i;u++)r[u]=n[u];return l.createElement.apply(null,r)}return l.createElement.apply(null,n)}k.displayName="MDXCreateElement"},5786:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>r,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var l=n(7462),a=(n(7294),n(3905));const i={},r="Linked list",s={unversionedId:"dataStructure/04linked_list",id:"dataStructure/04linked_list",title:"Linked list",description:"What it linked list?",source:"@site/docs/dataStructure/04linked_list.md",sourceDirName:"dataStructure",slug:"/dataStructure/04linked_list",permalink:"/docs/dataStructure/04linked_list",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/dataStructure/04linked_list.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Hash table",permalink:"/docs/dataStructure/03Hash_table"},next:{title:"Stacks and Queues",permalink:"/docs/dataStructure/05stacks_queues"}},d={},u=[{value:"What it linked list?",id:"what-it-linked-list",level:2},{value:"Pros and Cons",id:"pros-and-cons",level:2},{value:"What is pointer",id:"what-is-pointer",level:2},{value:"Implement linked list",id:"implement-linked-list",level:2},{value:"Doubly linked list",id:"doubly-linked-list",level:2},{value:"Single vs Double",id:"single-vs-double",level:2},{value:"Single",id:"single",level:3},{value:"double",id:"double",level:3},{value:"review linked list",id:"review-linked-list",level:2}],o={toc:u};function p(e){let{components:t,...i}=e;return(0,a.kt)("wrapper",(0,l.Z)({},o,i,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"linked-list"},"Linked list"),(0,a.kt)("h2",{id:"what-it-linked-list"},"What it linked list?"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"linklist_bigO",src:n(443).Z,width:"1518",height:"737"})),(0,a.kt)("p",null,"know how:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Head = first node"),(0,a.kt)("li",{parentName:"ul"},"Tail = last node => point to null"),(0,a.kt)("li",{parentName:"ul"},"No terminated (\u6c92\u6709\u7d42\u6b62)"),(0,a.kt)("li",{parentName:"ul"},"Javascript doesn't have linked list but we can create one",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Linked list and nodes are scattered(\u5206\u6563) all over memory\uff0clike hash table\u3002 But array is located right next to each other")))),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"pros-and-cons"},"Pros and Cons"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Pros")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Insert and delete faster than array \u56e0\u70ba array insert \u6216 delete \u4e4b\u5f8c\uff0c\u9084\u9700\u8981\u628a\u5f8c\u9762\u7684\u6578\u5b57\u5728 shift \u4e00\u6ce2\uff0c\u9019\u6642\u5019\u53ef\u80fd\u6703\u9047\u5230 array \u5927\u5c0f\u9700\u8981\u64f4\u5f35\u3002link list \u5247\u4e0d\u7528\u3002"),(0,a.kt)("li",{parentName:"ul"},"Sorted data compare to hash table")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Cons")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Finding index = 5 is lower than array\uff0c\u5982\u679c\u8981\u627e index=5\uff0carray \u53ef\u4ee5\u76f4\u63a5 array","[5]","\uff0c\u4f46\u662f linked list \u9700\u8981\u5f9e\u982d\u8dd1\u5230\u7b2c\u4e94\u500b node \u624d\u77e5\u9053\u3002")),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"what-is-pointer"},"What is pointer"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"let obj1 = { a: true };\nlet obj2 = obj1; // this obj2 is referrence (pointer) to obj 1 memory address.\nobj1.a = 'booya';\ndelete obj1;\nconsole.log(obj2); // {a:true} , still have value because javascript know you still have pointer to obj1\n")),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"implement-linked-list"},"Implement linked list"),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Click me show the codes"),(0,a.kt)("p",null,(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"// Create the below linked list:\n// myLinkedList = {\n//   head: {\n//     value: 10\n//     next: {\n//       value: 5\n//       next: {\n//         value: 16\n//         next: null\n//       }\n//     }\n//   }\n// };\n\nclass LinkedList {\n  constructor(value) {\n    this.head = {\n      value: value,\n      next: null,\n    };\n    this.tail = this.head;\n    this.length = 1;\n  }\n  append(value) {\n    let node = {\n      value,\n      next: null,\n    };\n    this.tail.next = node;\n    this.tail = node;\n    this.length++;\n  }\n  prepend(value) {\n    let headNode = this.head;\n    let preHeadNode = {\n      value,\n      next: headNode,\n    };\n    this.head = preHeadNode;\n    this.length++;\n  }\n  printList() {\n    const array = [];\n    let currentNode = this.head;\n    while (currentNode !== null) {\n      array.push(currentNode.value);\n      currentNode = currentNode.next;\n    }\n    console.log(array);\n    return array;\n  }\n  insert(index, value) {\n    if (index <= 0) {\n      this.prepend(value);\n    } else if (index >= this.length) {\n      this.append(value);\n    } else {\n      let current = this.head;\n      for (let i = 1; i < index; i++) {\n        current = current.next;\n      }\n      let node = {\n        value,\n        next: null,\n      };\n      let nextNode = current.next;\n      current.next = node;\n      node.next = nextNode;\n      this.length++;\n    }\n  }\n  remove(index) {\n    let head = this.head;\n    let count = 0;\n    if (index <= 0) {\n      this.head = head.next;\n      this.length--;\n    } else if (index >= this.length - 1) {\n      while (head) {\n        if (count === index - 1) {\n          head.next = null;\n          this.tail = head;\n          this.length--;\n          return;\n        }\n        count++;\n        head = head.next;\n      }\n    } else {\n      while (head) {\n        if (count === index - 1) {\n          head.next = head.next.next;\n          this.length--;\n          return;\n        }\n        count++;\n        head = head.next;\n      }\n    }\n  }\n  reverse() {\n    if (!this.head.next) {\n      return;\n    }\n    let head = this.head;\n    let prev = head;\n    head = head.next;\n    prev.next = null;\n    this.tail = prev;\n    let next = head.next;\n    let status = true;\n    while (status) {\n      head.next = prev;\n      prev = head;\n      head = next;\n      if (head.next) {\n        next = head.next;\n      } else {\n        head.next = prev;\n        this.head = head;\n        status = false;\n      }\n    }\n    return this;\n  }\n}\n\nlet myLinkedList = new LinkedList(10);\nmyLinkedList.printList(); // 10\nmyLinkedList.append(5);\nmyLinkedList.append(16);\nmyLinkedList.printList(); // 10 -> 5 -> 16\nmyLinkedList.prepend(1);\nmyLinkedList.printList(); // 1 -> 10 -> 5 -> 16\nmyLinkedList.insert(0, 0);\nmyLinkedList.printList(); // 0 -> 1 -> 10 -> 5 -> 16\nmyLinkedList.insert(2, 15);\nmyLinkedList.printList(); // 0 -> 1 -> 15 -> 10 -> 5 -> 16\nmyLinkedList.remove(0);\nmyLinkedList.printList(); // 1 -> 15 -> 10 -> 5 -> 16\nmyLinkedList.reverse();\nmyLinkedList.printList(); // 16 -> 5 -> 10 -> 15 -> 1\n")))),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"doubly-linked-list"},"Doubly linked list"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"doubly_link_list",src:n(8221).Z,width:"987",height:"489"})),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"let node = {\n  val: null,\n  next: null,\n  prev: null, // doubly add prev key.\n};\n")),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"single-vs-double"},"Single vs Double"),(0,a.kt)("h3",{id:"single"},"Single"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"\u512a\u9ede\uff1a"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"\u7c21\u55ae"),(0,a.kt)("li",{parentName:"ul"},"\u8a18\u61b6\u9ad4\u5c11"),(0,a.kt)("li",{parentName:"ul"},"Insertion \u548c deletion \u666e\u904d\u6bd4 doubly \u9084\u5feb\u4e00\u9ede\uff0c\u56e0\u70ba\u7a0b\u5f0f\u78bc\u8f03\u5c11\uff0c\u8655\u7406\u7684\u6b65\u9a5f\u5c11\u3002"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"\u7f3a\u9ede\uff1a"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Head node \u7684 reference \u6d88\u5931\uff0c\u6574\u500b linked list \u5c31\u6703\u4e0d\u898b\u3002"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"\u4f7f\u7528\u60c5\u5883\uff1a"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"\u8a18\u61b6\u9ad4\u5c11\uff0c\u9700\u8981 fast insert and delete \u6216 searching \u8f03\u5c11\u60c5\u5883\u3002")))),(0,a.kt)("h3",{id:"double"},"double"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"\u512a\u9ede\uff1a"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Iterated or traverse both from the front or from the back\u3002"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"\u7f3a\u9ede\uff1a"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"\u8a18\u61b6\u9ad4\u4f54\u7528\u8f03\u5927\u3002"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"\u4f7f\u7528\u671f\u9593\uff1a"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"\u8a18\u61b6\u9ad4\u8f03\u5145\u88d5\uff0c\u60f3\u67e5\u8a62\u5f9e\u524d\u5230\u5f8c\u6216\u7531\u5f8c\u5230\u524d\u7684\u6642\u6a5f\u3002")))),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"review-linked-list"},"review linked list"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Fast insertion"),(0,a.kt)("li",{parentName:"ul"},"Fast deletion"),(0,a.kt)("li",{parentName:"ul"},"Ordered"),(0,a.kt)("li",{parentName:"ul"},"Flexible size"),(0,a.kt)("li",{parentName:"ul"},"Slow LookUp (because need traverse linked list) compare to array and Object, array has index, and Object has key"),(0,a.kt)("li",{parentName:"ul"},"More memory")))}p.isMDXComponent=!0},8221:(e,t,n)=>{n.d(t,{Z:()=>l});const l=n.p+"assets/images/doubly_link_list-b0b5e81770de444448d3da03d6fca8c3.png"},443:(e,t,n)=>{n.d(t,{Z:()=>l});const l=n.p+"assets/images/linklist_bigO-179ad8293c6a846b0ef0e6ad76a166ce.png"}}]);